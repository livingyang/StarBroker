// Generated by CoffeeScript 1.4.0
(function() {
  var TimeRecoverProperty;

  TimeRecoverProperty = (function() {

    function TimeRecoverProperty(options) {
      if (!(options != null)) {
        options = {};
      }
      if (!(options.maxRecoverTime != null) || options.maxRecoverTime <= 0) {
        options.maxRecoverTime = 1;
      }
      if (!(options.curRecoverTime != null) || options.curRecoverTime < 0) {
        options.curRecoverTime = 0;
      }
      if (!(options.timeToValueRate != null) || options.timeToValueRate <= 0) {
        options.timeToValueRate = 1;
      }
      if (!(options.timeStamp != null)) {
        options.timeStamp = 0;
      }
      this.maxRecoverTime = options.maxRecoverTime, this.timeToValueRate = options.timeToValueRate, this.curRecoverTime = options.curRecoverTime, this.timeStamp = options.timeStamp;
    }

    TimeRecoverProperty.prototype.getValue = function(time) {
      var subTime;
      if (!(time != null)) {
        time = this.timeStamp;
      }
      subTime = time - this.timeStamp;
      if (this.curRecoverTime > this.maxRecoverTime) {
        return this.curRecoverTime / this.timeToValueRate;
      } else {
        return (this.curRecoverTime + subTime) / this.timeToValueRate;
      }
    };

    TimeRecoverProperty.prototype.updateTime = function(time) {
      var subTime;
      if ((time != null) && time > this.timeStamp) {
        subTime = time - this.timeStamp;
        this.timeStamp = time;
        if (this.curRecoverTime < this.maxRecoverTime) {
          this.curRecoverTime += subTime;
          if (this.curRecoverTime > this.maxRecoverTime) {
            return this.curRecoverTime = this.maxRecoverTime;
          }
        }
      }
    };

    TimeRecoverProperty.prototype.getSubTime = function(curTime) {
      if (!(curTime != null)) {
        curTime = (new Date()).getTime();
      }
      return curTime - this.timeStamp;
    };

    TimeRecoverProperty.prototype.getMaxValue = function() {
      return Math.floor(this.maxRecoverTime / this.timeToValueRate);
    };

    TimeRecoverProperty.prototype.getCurValue = function(curTime) {
      var curValue;
      curValue = 0;
      curTime = curTime || (new Date()).getTime();
      if (curTime < this.timeStamp) {
        curTime = this.timeStamp;
      }
      if (this.curRecoverTime > this.maxRecoverTime) {
        curValue = Math.floor(this.curRecoverTime / this.timeToValueRate);
      } else {
        this.curRecoverTime = this.curRecoverTime + this.getSubTime(curTime);
        if (this.curRecoverTime > this.maxRecoverTime) {
          this.curRecoverTime = this.maxRecoverTime;
        }
        curValue = Math.floor(this.curRecoverTime / this.timeToValueRate);
      }
      this.timeStamp = curTime;
      return curValue;
    };

    TimeRecoverProperty.prototype.getRemainRecoverTime = function(curTime) {
      var remainTime;
      remainTime = this.maxRecoverTime - (this.getSubTime(curTime)) - this.curRecoverTime;
      if (remainTime < 0) {
        remainTime = 0;
      }
      return remainTime;
    };

    TimeRecoverProperty.prototype.convertValueToTime = function(value) {
      if (!value instanceof Number || value < 0) {
        value = 0;
      }
      return value * this.timeToValueRate;
    };

    TimeRecoverProperty.prototype.increaseCurValue = function(increaseValue) {
      if (this.getCurValue() >= increaseValue && this.curRecoverTime >= this.convertValueToTime(increaseValue)) {
        return this.curRecoverTime -= this.convertValueToTime(increaseValue);
      }
    };

    return TimeRecoverProperty;

  })();

  this.TimeRecoverProperty = TimeRecoverProperty;

}).call(this);
